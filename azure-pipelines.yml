trigger:
  - feature/*
  - main

pool:
  vmImage: 'ubuntu-latest'

# variables:
#   - ${{ if eq(variables['Build.SourceBranchName'], 'main') }}:
#     - group: PROD_DEVOPS_TEST_INFRA
#   - ${{ if eq(variables['Build.SourceBranchName'], 'feature/') }}:
#     - group: DEV_DEVOPS_TEST_INFRA

variables:
- group: DEV_DEVOPS_TEST_INFRA

jobs:
- job: SettingInfraestructure
  displayName: 'Setting depencies and env vars'
  steps:
  - task: TerraformInstaller@0
    displayName: Install Terraform
    inputs:
      terraformVersion: '1.9.6'

  - task: Bash@3
    displayName: Setting enviroment variables
    inputs:
      targetType: 'inline'
      script: |
        echo $(ENV)
        echo "test***"
        export ARM_CLIENT_ID="$(DEVOPS_TEST_INFRA_CL_ID)"
        export ARM_CLIENT_SECRET="$(DEVOPS_TEST_INFRA_SEC)"
        export ARM_TENANT_ID="$(DEVOPS_TEST_INFRA_TENANT)"
        export ARM_SUBSCRIPTION_ID="$(DEVOPS_TEST_INFRA_SUSC)"

  - task: Bash@3
    displayName: Terraform init 
    inputs:
      targetType: 'inline'
      script: |
        terraform init 
        terraform plan -var="env_code=$(ENV)" -var="project=$(NAME)" 
    env:
      ARM_CLIENT_ID: $(DEV_DEVOPS_TEST_INFRA_CL_ID)
      ARM_CLIENT_SECRET: $(DEV_DEVOPS_TEST_INFRA_SEC)
      ARM_TENANT_ID: $(DEV_DEVOPS_TEST_INFRA_TENANT)
      ARM_SUBSCRIPTION_ID: $(DEV_DEVOPS_TEST_INFRA_SUSC)

- job: DeployInfraestructure
  displayName: 'Deploy Infraestructure'
  dependsOn: 'SettingInfraestructure'
  steps:
  - task: Bash@3
    displayName: Terraform plan & apply
      - 'Terraform_Plan'
    inputs:
      targetType: 'inline'
      script: |
        terraform apply -auto-approve
    env:
      ARM_CLIENT_ID: $(DEV_DEVOPS_TEST_INFRA_CL_ID)
      ARM_CLIENT_SECRET: $(DEV_DEVOPS_TEST_INFRA_SEC)
      ARM_TENANT_ID: $(DEV_DEVOPS_TEST_INFRA_TENANT)
      ARM_SUBSCRIPTION_ID: $(DEV_DEVOPS_TEST_INFRA_SUSC)